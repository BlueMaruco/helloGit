public class Solution {
    public boolean canFinish(int num, int[][] prerequisites){
	    if(prerequisites==null||prerequisites.length==0) return true;
        boolean[] visited = new boolean[num];
        boolean[] path = new boolean[num];
	    List<Integer>[] graph = new LinkedList[num];
	    for(int[] edge:prerequisites){
		    if(graph[edge[0]]==null)
		        graph[edge[0]] = new LinkedList<>();
		    graph[edge[0]].add(edge[1]);
        }
        for(int i = 0;i<num;i++){
	        if(!visited[i]){
		        if(!dfs(visited,graph,i,path))
			        return false;
            }
        }
        return true;
    }
    public boolean dfs(boolean[] visited, List<Integer>[] graph,int index,boolean[] path){
    	if(graph[index]==null||graph[index].size()==0) return true;
    	visited[index] = true;
    	path[index] = true;
    	Iterator it = graph[index].iterator();
    	while(it.hasNext()){
    		int i = (int)it.next();
    		if(path[i]){return false;}
    		if(!visited[i]){
    			if(!dfs(visited,graph,i,path))
    				return false;
            }
        }
    	path[index] = false;
    	return true;
    }

}
