class TrieNode{
	int val;
	TrieNode[] children;
	boolean exit;
	public TrieNode(){
	    children = new TrieNode[26];
    }
    public TrieNode(char val){
    	this.val = val-'a';
        children = new TrieNode[26];
    }
}
public class Trie{
	TrieNode root;
	public Trie(){
	    root = new TrieNode();
	}
	public void insert(String word){
		char[] array = word.toCharArray();
		TrieNode tmp_root = root;
        for(char tmp:array){
        	if(tmp_root.children[tmp-'a']==null)
        		tmp_root.children[tmp-'a'] = new TrieNode(tmp);
        	tmp_root = tmp_root.children[tmp-'a'];	
        }
        tmp_root.exit = true;
    }
    public boolean search(String word){
    	char[] array = word.toCharArray();
    	TrieNode tmp_root = root;
        for(char tmp:array){
        	if(tmp_root.children[tmp-'a']==null)
        		return false;
        	tmp_root = tmp_root.children[tmp-'a'];	
        }
        return tmp_root.exit==true;
    }
	public boolean startsWith(String prefix){
		char[] array = prefix.toCharArray();
	    TrieNode tmp_root = root;
        for(char tmp:array){
        	if(tmp_root.children[tmp-'a']==null)
        		return false;
        	tmp_root = tmp_root.children[tmp-'a'];	
        }
        return true;
    }
}

