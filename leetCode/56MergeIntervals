/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
   public List<Interval> merge(List<Interval> list){
	if(list.isEmpty()) return list;
	Collections.sort(list, new Comparator<Interval>(){
        public int compare(Interval a,Interval b){
		    return a.start - b.start;
        }
    });
    List<Interval> mergeList = new ArrayList<>();
    Interval pre = list.get(0);
    for(int i = 1 ;i<list.size();i++){
	    Interval cur = list.get(i);
    	if(cur.start<=pre.end) pre.end = Math.max(pre.end,cur.end);
        else{
    	    mergeList.add(pre);
        	pre = cur;
        }   

    }
    if(!mergeList.contains(pre))
	    mergeList.add(pre);
    return mergeList;

    }

}
