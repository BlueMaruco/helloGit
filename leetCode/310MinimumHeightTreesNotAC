public class Solution {
    int x_f,y_f;
    int dis;
    int[][] graph;

    public List<Integer> findMinHeightTrees(int n,int[][] edges){
        graph = new int[n][n];
        dis = 0;
        x_f=0;y_f=0;
        List<Integer> label = new ArrayList<>();
        for(int i = 0;i<edges.length;i++){
            int x,y;
            int count = 0;
            x=edges[i][0];
            y=edges[i][1];
            graph[x][y]=1;
            graph[y][x]=1;
            updateGraph(x,y,count+1);
        }
        boolean flag = false;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(dis<graph[i][j]){
                    dis=graph[i][j];
                    x_f=i;
                    y_f=j;
                }
            }
        }
        if(dis%2==0)
            flag=true;
        dis=dis/2;
        for(int i =0;i<n;i++){
            if(graph[x_f][i]==dis){
                label.add(i);
                if(flag)
                    break;
            }
            if(!flag&&graph[y_f][i]==dis){
                label.add(i);
            }
        }
        return label;
    }

    public void updateGraph(int x,int y,int count){
        for(int i =0;i<graph.length;i++){
            if(x==i||y==i)
                continue;
            if(graph[x][i]==0&&graph[y][i]!=0){
                graph[x][i]=graph[y][i]+count;
                graph[i][x]=graph[x][i];
                updateGraph(x,i,count+1);
            }
            if(graph[y][i]==0&&graph[x][i]!=0){
                graph[y][i]=graph[x][i]+count;
                graph[i][y]=graph[y][i];
                updateGraph(y,i,count+1);
            } else if(graph[y][i]>0&&graph[y][i]>graph[x][i]+count){
                graph[y][i]=graph[x][i]+count;
                graph[i][y]=graph[y][i];
                updateGraph(y,i,graph[y][i]);
            }
            else if(graph[x][i]>0&&graph[x][i]>graph[y][i]+count){
                graph[x][i]=graph[y][i]+count;
                graph[i][x]=graph[x][i];
                updateGraph(x,i,graph[x][i]);
            }




        }

    }
}
