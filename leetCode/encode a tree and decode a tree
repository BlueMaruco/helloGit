import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class Codec{
    private static final String splitter = ",";
    public String serialize(TreeNode root){
        StringBuilder sb = new StringBuilder();
        buildString(root,sb);
        return sb.toString();
    }
    public void buildString(TreeNode root, StringBuilder sb){
        sb.append(root.val).append(splitter);
        if(root.children==null) {sb.append(0).append(splitter);return;}
        sb.append(root.children.length).append(splitter);
        for(int i = 0;i<root.children.length;i++){
            buildString(root.children[i],sb);
        }
    }

    public TreeNode deserialize(String encode_str){
        String[] strings = encode_str.split(splitter);
        Queue<String> strQueue = new LinkedList<>(Arrays.asList(strings));
        return buildTree(strQueue);
    }
    public TreeNode buildTree(Queue<String> strQueue){
        String val = strQueue.poll();
        int num = Integer.parseInt(strQueue.poll());

        TreeNode treeNode;
        if(num==0){
            treeNode = new TreeNode(Integer.parseInt(val));
        }else{
            TreeNode[] children = new TreeNode[num];
            for(int i = 0;i<num;i++){
                children[i] = buildTree(strQueue);
            }
            treeNode = new TreeNode(Integer.parseInt(val),children);
        }
        return treeNode;

    }

}
