/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     List<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */
public class Solution {
   public UndirectedGraphNode cloneGraph(UndirectedGraphNode root_node){
	    if(root_node == null) return null;
	    Queue<UndirectedGraphNode> queue = new LinkedList<>();
	    Map<Integer,UndirectedGraphNode> map = new HashMap<>();
	    queue.add(root_node);
      map.put(root_node.label,new UndirectedGraphNode(root_node.label));
	    while(!queue.isEmpty()){
		    UndirectedGraphNode node = queue.poll();
	        for(UndirectedGraphNode neighbor:node.neighbors){
                   if(!map.containsKey(neighbor.label)){
                        queue.add(neighbor);
                        map.put(neighbor.label,new UndirectedGraphNode(neighbor.label));
                    }
                map.get(node.label).neighbors.add(map.get(neighbor.label));
            }
      }
      return map.get(root_node.label);
    }
}
