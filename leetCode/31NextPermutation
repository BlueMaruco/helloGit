public class Solution {
    public void nextPermutation(int[] nums){
    	  if (nums==null||nums.length==0||nums.length==1)return;
    	  int len = nums.length;
    	  if(nums[len-1]>nums[len-2]||nums.length==2){	
            swap(nums,len-1,len-2);return;
    
        }
        ArrayList<Integer> array = new ArrayList<>();
        array.add(nums[len-1]);
        int loc = 0;
    	  for(int i=len-2;i>0;i--){
    		    if(nums[i]<=nums[i-1]){ 
                array.add(nums[i]);
            }else {
                array.add(nums[i]);
                int index = binarysearch(nums[i-1],array);
                loc = i;  
                int tmp = nums[i-1];
                nums[loc-1] = array.get(index);
                array.set(index, tmp);
                break;
            }
        }
        if(loc==0) array.add(nums[0]);
        int j = 0;
        for(int i = loc;i<len;i++){
        	nums[i] = array.get(j++);
        }

    }

public int binarysearch(int x, ArrayList<Integer> array){

	int i = 0;
	int j = array.size()-1;
	while(i+1<j){
		int median = i+(j-i)/2;
		if(array.get(median)>x) j = median;
		else i = median;
		
  }
  return x<array.get(i)?i:j;
}

public void swap(int[] nums,int x, int y){
	int tmp = nums[x];
	nums[x] = nums[y];
	nums[y] = tmp;
}

}
