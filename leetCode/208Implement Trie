class TrieNode{
    public boolean exist;
//    private int index;
    public TrieNode[] children;
    public TrieNode(){
        children = new TrieNode[26];
        exist = false;
    }

//public TrieNode(char c){
//index = (int) c.charValue()-97;

//childrens = newTrieNode[26];
//}
}

public class Trie{
    private TrieNode root;
    private TrieNode pointer;
    public Trie(){
        root = new TrieNode();

    }
    public void insert(String word){
        pointer = root;
        int len = word.length();
        if(len==0){
            return;
        }
        for(int i = 0;i<len;i++){
            int tmp_index = (int)word.charAt(i)-97; // a ->0,b->1...
            if (pointer.children[tmp_index]!=null){
                pointer = pointer.children[tmp_index];
            }
            else{
                pointer.children[tmp_index] = new TrieNode();
                pointer = pointer.children[tmp_index];
            }
            if(i==len-1){
                pointer.exist = true;
            }
        }
    }

    public boolean search(String word){
        pointer = root;
        int len = word.length();
        if(len==0){
            return false;
        }
        for(int i =0 ;i<len;i++){
            int tmp_index = (int)word.charAt(i)-97;
            if(pointer.children[tmp_index]==null){
                return false;
            }
            else{
                pointer = pointer.children[tmp_index];
            }

        }
        if(pointer.exist)
            return true;
        else
            return false;
    }

    public boolean startsWith(String prefix){

        pointer = root;
        int len = prefix.length();
        if(len==0){
            return false;
        }
        for(int i =0 ;i<len;i++){
            int tmp_index = (int)prefix.charAt(i)-97;
            if(pointer.children[tmp_index]==null){
                return false;
            }
            else{
                pointer = pointer.children[tmp_index];
            }

        }

        return true;




    }
}
