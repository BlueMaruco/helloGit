public class Solution {
    
    private class UnionFind{
    	private int components;
    	private int[] roots;
    	private int[] weights;
	    public UnionFind(int n,int[][] edges){
    		components = n;
    		roots = new int[n];
    		weights = new int[n];
    		Arrays.fill(weights,1);
		    for(int i = 0;i<n;i++){
	            roots[i]=i;
            }
    		for(int[] edge:edges){
    		 	union(edge);
            }
	
    }
    public void union(int[] edge){
	    int node1 = edge[0];
		  int node2 = edge[1];
		  int root1 = findRoot(node1);
	  	int root2 = findRoot (node2);
		  if(root1== root2) return;
		  else if(weights[root1]>weights[root2]){ 
            roots[root2] = root1;
            weights[root1] += weights[root2];
        }
		  else{
  			    roots[root1]=root2;
  			    weights[root2] += weights[root1];
      }
      components--;

    }
    public int findRoot(int node){
	    if(roots[node]!=node) return findRoot(roots[node]);
	    return node;
    }
    public int components(){
	    return components;
    }
}
    public int countComponents(int n,int[][] edges){
    	UnionFind UF = new UnionFind(n,edges);
    	return UF.components();
    }
}
