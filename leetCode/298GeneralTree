public int longestConsecutive(TreeNode root){
	if(root == null) return 0;
	return dfs(root,1));	
}
public int dfs(TreeNode root, int len){
  int longest = len;
	int val = root.val;
	int num = root.children.length;
	for(int i = 0;i<num;i++){
		if(root.children[i].val==val+1){
	    longest = Math.max(longest,dfs(root.children[i],len+1));
    }else{
    	longest = Math.max(longest,dfs(root.children[i],1));
    }
  }
  return longest;
}

public int longestConsecutive(TreeNode root){
	if(root == null) return 0;
  return dfs(root,1);	
}
public int dfs(TreeNode root, int len){
  int longest = len;
  if(root.left!=null){
	  if(root.left.val==root.val+1){
	    longest = Math.max(longest,dfs(root.left,len+1));
    }else{
	    longest = Math.max(longest,dfs(root.left,1));
  }

  }
  if(root.right!=null){
	  if(root.right.val==root.val+1){
	    longest = Math.max(longest,dfs(root.right,len+1));
    }else{
	    longest = Math.max(longest,dfs(root.right,1));
    }

  }	
	return longest;
}

