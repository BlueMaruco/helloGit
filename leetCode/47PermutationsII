public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums){
	    if(nums==null||nums.length==0) return null;
	    List<List<Integer>> permutations = new ArrayList<>();
	    Map<Integer,Integer> count = new HashMap<>();
	    for(int tmp:nums){
    		Integer val = count.get(tmp);
            count.put(tmp,(val!=null?val+1:1));
      }
      List<Integer> permutation = new ArrayList<>();
    	dfs(permutations,permutation,count,nums.length);
    	return permutations;
	
    }
    public void dfs(List<List<Integer>> permutations,List<Integer> permutation,Map<Integer,Integer> count,int len){
        if(permutation.size()==len){
    	    List<Integer> tmp = new ArrayList<>(permutation);
    	    permutations.add(tmp);
    	    return;
        }
        for(Map.Entry<Integer,Integer> entry:count.entrySet()){
    	    int val = entry.getValue();
    	    int key = entry.getKey();
            if(val>0){
        	    permutation.add(key);
        	    count.put(key,--val);
        	    dfs(permutations,permutation,count,len);
        	    permutation.remove(permutation.size()-1);
        	    count.put(key,++val);
            }
        }
    
    }

}
